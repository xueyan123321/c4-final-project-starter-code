service:
  name: serverless-date-courses-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'ap-northeast-2'}

  tracing:
    lambda: true
    apiGateway: true

  environment:
    VIDEOS_TABLE: dateCourses-${self:provider.stage}
    VIDEOS_ID_INDEX: videosIdIndex
    AUTH_0_SECRET: y1JYZ-ymqL8jCT0NXaKziB8zv9zORLIKzLprcY9g7-3Q6vLJumq6HRb50r0Qh1l6
    ATTACHMENTS_BUCKET: datecourses-attachments-url-${self:provider.stage}-${self:provider.region}
    SIGNED_URL_EXPIRATION: 300

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  # TODO: Configure this function
  GetVideos:
    handler: src/lambda/http/getVideos.handler
    events:
      - http:
          method: get
          path: videos
          cors: true
          authorizer: Auth
    iamRoleStatementsName: get-videos-role-function
    iamRoleStatements:
      - Effect: Allow
        Action: 
          - dynamodb:GetItem
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.VIDEOS_TABLE}
      - Effect: Allow
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"
      


  # TODO: Configure this function

  CreateVideo:
    handler: src/lambda/http/createVideo.handler
    events:
      - http:
          method: post
          path: videos
          cors: true
          authorizer: Auth
          request: 
          # schema that will be used to validate incoming requests
            schema:
              application/json: ${file(src/models/validators/create-video-request.json)}
    iamRoleStatementsName: create-video-role-function-modify
    iamRoleStatements: 
      - Effect: Allow
        Action: 
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.VIDEOS_TABLE}
      - Effect: Allow
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"


  # TODO: Configure this function
  UpdateVideo:
    handler: src/lambda/http/updateVideo.handler
    events:
      - http:
          method: patch
          path: videos/{videoId}
          cors: true
          request:
          # schema that will be used to validate incoming requests
            schema:
              application/json: ${file(src/models/validators/update-video-request.json)}
    iamRoleStatementsName: update-video-role-function
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.VIDEOS_TABLE}/index/${self:provider.environment.VIDEOS_ID_INDEX}
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.VIDEOS_TABLE}
      - Effect: Allow
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"

  # TODO: Configure this function
  DeleteVideo:
    handler: src/lambda/http/deleteVideo.handler
    events:
      - http:
          method: delete
          path: videos/{videoId}
          cors: true
    iamRoleStatementsName: delete-video-role1-function
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.VIDEOS_TABLE}/index/${self:provider.environment.VIDEOS_ID_INDEX}
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.VIDEOS_TABLE}
      - Effect: Allow
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"

  # TODO: Configure this function
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: videos/{videoId}/attachment
          cors: true
    iamRoleStatementsName: generate-uploadUrl-video-role-function
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.ATTACHMENTS_BUCKET}/*
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.VIDEOS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.VIDEOS_TABLE}/index/${self:provider.environment.VIDEOS_ID_INDEX}
      - Effect: Allow
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"


resources:
  Resources:
    # TODO: Add any necessary AWS resources
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.ATTACHMENTS_BUCKET}
        CorsConfiguration:
            CorsRules:
              -
                AllowedOrigins:
                  - '*'
                AllowedHeaders:
                  - '*'
                AllowedMethods:
                  - GET
                  - PUT
                  - POST
                  - DELETE
                  - HEAD
                MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref AttachmentsBucket
        PolicyDocument: 
          Version: '2012-10-17'
          Statement:
          - Principal: '*'
            Action: 's3:GetObject'
            Effect: Allow
            Resource: arn:aws:s3:::${self:provider.environment.ATTACHMENTS_BUCKET}/*

    videosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: uploadAtTime
            AttributeType: S
          - AttributeName: videoId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: uploadAtTime
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.VIDEOS_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.VIDEOS_ID_INDEX}
            KeySchema:
              - AttributeName: videoId
                KeyType: HASH
            Projection: 
              ProjectionType: ALL
              

        
